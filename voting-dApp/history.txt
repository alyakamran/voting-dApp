truffle init
truffle compile
truffle migrate
truffle debug
truffle migrate --reset --debug
truffle migrate
solc --version
truffle migrate
truffle compile
truffle migrate
git init
git add .
doskey /history > history.txt

//

Microsoft Windows [Version 10.0.22621.2861]
(c) Microsoft Corporation. All rights reserved.

C:\Users\LENOVO\Desktop\uni\SEM 1 2023 2024\CSCI 4312 Blockchain\Group Project\voting-dApp>truffle init

Starting init...
================

> Copying project files to C:\Users\LENOVO\Desktop\uni\SEM 1 2023 2024\CSCI 4312 Blockchain\Group Project\voting-dApp

Init successful, sweet!

Try our scaffold commands to get started:
  $ truffle create contract YourContractName # scaffold a contract
  $ truffle create test YourTestName         # scaffold a test

http://trufflesuite.com/docs


C:\Users\LENOVO\Desktop\uni\SEM 1 2023 2024\CSCI 4312 Blockchain\Group Project\voting-dApp>truffle compile

Compiling your contracts...
===========================
√ Fetching solc version list from solc-bin. Attempt #1
√ Downloading compiler. Attempt #1.
> Compiling .\contracts\Election.sol
> Artifacts written to C:\Users\LENOVO\Desktop\uni\SEM 1 2023 2024\CSCI 4312 Blockchain\Group Project\voting-dApp\build\contracts
> Compiled successfully using:
   - solc: 0.8.23+commit.f704f362.Emscripten.clang

C:\Users\LENOVO\Desktop\uni\SEM 1 2023 2024\CSCI 4312 Blockchain\Group Project\voting-dApp>truffle migrate

Compiling your contracts...
===========================
√ Fetching solc version list from solc-bin. Attempt #1
> Compiling .\contracts\Election.sol
> Artifacts written to C:\Users\LENOVO\Desktop\uni\SEM 1 2023 2024\CSCI 4312 Blockchain\Group Project\voting-dApp\build\contracts
> Compiled successfully using:
   - solc: 0.8.23+commit.f704f362.Emscripten.clang
> Something went wrong while attempting to connect to the network at http://127.0.0.1:7545. Check your network configuration.
CONNECTION ERROR: Couldn't connect to node http://127.0.0.1:7545.
Truffle v5.11.5 (core: 5.11.5)
Node v20.8.0

C:\Users\LENOVO\Desktop\uni\SEM 1 2023 2024\CSCI 4312 Blockchain\Group Project\voting-dApp>truffle migrate

Compiling your contracts...
===========================
√ Fetching solc version list from solc-bin. Attempt #1
> Compiling .\contracts\Election.sol
> Artifacts written to C:\Users\LENOVO\Desktop\uni\SEM 1 2023 2024\CSCI 4312 Blockchain\Group Project\voting-dApp\build\contracts
> Compiled successfully using:
   - solc: 0.8.23+commit.f704f362.Emscripten.clang
Network up to date.

C:\Users\LENOVO\Desktop\uni\SEM 1 2023 2024\CSCI 4312 Blockchain\Group Project\voting-dApp>
C:\Users\LENOVO\Desktop\uni\SEM 1 2023 2024\CSCI 4312 Blockchain\Group Project\voting-dApp>truffle migrate

Compiling your contracts...
===========================
√ Fetching solc version list from solc-bin. Attempt #1
> Compiling .\contracts\Election.sol
> Artifacts written to C:\Users\LENOVO\Desktop\uni\SEM 1 2023 2024\CSCI 4312 Blockchain\Group Project\voting-dApp\build\contracts
> Compiled successfully using:
   - solc: 0.8.23+commit.f704f362.Emscripten.clang


Starting migrations...
======================
> Network name:    'ganache'
> Network id:      5777
> Block gas limit: 6721975 (0x6691b7)


2_deploy_contracts.js
=====================

   Deploying 'Election'
   --------------------
 *** Deployment Failed ***

"Election" hit an invalid opcode while deploying. Try:
   * Verifying that your constructor params satisfy all assert conditions.
   * Verifying your constructor code doesn't access an array out of bounds.
   * Adding reason strings to your assert statements.


Exiting: Review successful transactions manually by checking the transaction hashes above on Etherscan.


Error:  *** Deployment Failed ***

"Election" hit an invalid opcode while deploying. Try:
   * Verifying that your constructor params satisfy all assert conditions.
   * Verifying your constructor code doesn't access an array out of bounds.
   * Adding reason strings to your assert statements.

    at C:\Users\LENOVO\AppData\Roaming\npm\node_modules\truffle\build\webpack:\packages\deployer\src\deployment.js:330:1Truffle v5.11.5 (core: 5.11.5)
Node v20.8.0

C:\Users\LENOVO\Desktop\uni\SEM 1 2023 2024\CSCI 4312 Blockchain\Group Project\voting-dApp>
C:\Users\LENOVO\Desktop\uni\SEM 1 2023 2024\CSCI 4312 Blockchain\Group Project\voting-dApp>
C:\Users\LENOVO\Desktop\uni\SEM 1 2023 2024\CSCI 4312 Blockchain\Group Project\voting-dApp>truffle debug
Starting Truffle Debugger...
√ Gathering information about your project...

Commands:
(enter) last command entered (step next)
(o) step over, (i) step line / step into, (u) step out, (n) step next
(c) continue until breakpoint, (Y) reset & continue to previous error
(y) (if at end) reset & continue to final error
(;) step instruction (include number to step multiple)
(g) turn on generated sources, (G) turn off generated sources except via `;`
(p) print instruction & state (`p [mem|cal|sto]*`; see docs for more)
(l) print additional source context (`l [+<lines-ahead>] [-<lines-back>]`)
(s) print stacktrace, (e) Print recent events (`e [<number>|all]`)
(q) quit, (r) reset, (t) load new transaction, (T) unload transaction
(b) add breakpoint (`b [[<source-file>:]<line-number>]`; see docs for more)
(B) remove breakpoint (similar to adding, or `B all` to remove all)
(+) add watch expression (`+:<expr>`), (-) remove watch expression (-:<expr>)
(?) list existing watch expressions and breakpoints
(v) print variables and values (`v [bui|glo|con|loc]*`)
(:) evaluate expression - see `v`, (h) print this help

Docs: https://trufflesuite.com/docs/truffle/how-to/debug-test/use-the-truffle-debugger/

debug(ganache)>
No transaction loaded.

debug(ganache)> /

Commands:
(enter) last command entered (step next)
(o) step over, (i) step line / step into, (u) step out, (n) step next
(c) continue until breakpoint, (Y) reset & continue to previous error
(y) (if at end) reset & continue to final error
(;) step instruction (include number to step multiple)
(g) turn on generated sources, (G) turn off generated sources except via `;`
(p) print instruction & state (`p [mem|cal|sto]*`; see docs for more)
(l) print additional source context (`l [+<lines-ahead>] [-<lines-back>]`)
(s) print stacktrace, (e) Print recent events (`e [<number>|all]`)
(q) quit, (r) reset, (t) load new transaction, (T) unload transaction
(b) add breakpoint (`b [[<source-file>:]<line-number>]`; see docs for more)
(B) remove breakpoint (similar to adding, or `B all` to remove all)
(+) add watch expression (`+:<expr>`), (-) remove watch expression (-:<expr>)
(?) list existing watch expressions and breakpoints
(v) print variables and values (`v [bui|glo|con|loc]*`)
(:) evaluate expression - see `v`, (h) print this help

Docs: https://trufflesuite.com/docs/truffle/how-to/debug-test/use-the-truffle-debugger/

debug(ganache)> /

Commands:
(enter) last command entered (undefined)
(o) step over, (i) step line / step into, (u) step out, (n) step next
(c) continue until breakpoint, (Y) reset & continue to previous error
(y) (if at end) reset & continue to final error
(;) step instruction (include number to step multiple)
(g) turn on generated sources, (G) turn off generated sources except via `;`
(p) print instruction & state (`p [mem|cal|sto]*`; see docs for more)
(l) print additional source context (`l [+<lines-ahead>] [-<lines-back>]`)
(s) print stacktrace, (e) Print recent events (`e [<number>|all]`)
(q) quit, (r) reset, (t) load new transaction, (T) unload transaction
(b) add breakpoint (`b [[<source-file>:]<line-number>]`; see docs for more)
(B) remove breakpoint (similar to adding, or `B all` to remove all)
(+) add watch expression (`+:<expr>`), (-) remove watch expression (-:<expr>)
(?) list existing watch expressions and breakpoints
(v) print variables and values (`v [bui|glo|con|loc]*`)
(:) evaluate expression - see `v`, (h) print this help

Docs: https://trufflesuite.com/docs/truffle/how-to/debug-test/use-the-truffle-debugger/

debug(ganache)>

Commands:
(enter) last command entered (undefined)
(o) step over, (i) step line / step into, (u) step out, (n) step next
(c) continue until breakpoint, (Y) reset & continue to previous error
(y) (if at end) reset & continue to final error
(;) step instruction (include number to step multiple)
(g) turn on generated sources, (G) turn off generated sources except via `;`
(p) print instruction & state (`p [mem|cal|sto]*`; see docs for more)
(l) print additional source context (`l [+<lines-ahead>] [-<lines-back>]`)
(s) print stacktrace, (e) Print recent events (`e [<number>|all]`)
(q) quit, (r) reset, (t) load new transaction, (T) unload transaction
(b) add breakpoint (`b [[<source-file>:]<line-number>]`; see docs for more)
(B) remove breakpoint (similar to adding, or `B all` to remove all)
(+) add watch expression (`+:<expr>`), (-) remove watch expression (-:<expr>)
(?) list existing watch expressions and breakpoints
(v) print variables and values (`v [bui|glo|con|loc]*`)
(:) evaluate expression - see `v`, (h) print this help

Docs: https://trufflesuite.com/docs/truffle/how-to/debug-test/use-the-truffle-debugger/

debug(ganache)>

Commands:
(enter) last command entered (undefined)
(o) step over, (i) step line / step into, (u) step out, (n) step next
(c) continue until breakpoint, (Y) reset & continue to previous error
(y) (if at end) reset & continue to final error
(;) step instruction (include number to step multiple)
(g) turn on generated sources, (G) turn off generated sources except via `;`
(p) print instruction & state (`p [mem|cal|sto]*`; see docs for more)
(l) print additional source context (`l [+<lines-ahead>] [-<lines-back>]`)
(s) print stacktrace, (e) Print recent events (`e [<number>|all]`)
(q) quit, (r) reset, (t) load new transaction, (T) unload transaction
(b) add breakpoint (`b [[<source-file>:]<line-number>]`; see docs for more)
(B) remove breakpoint (similar to adding, or `B all` to remove all)
(+) add watch expression (`+:<expr>`), (-) remove watch expression (-:<expr>)
(?) list existing watch expressions and breakpoints
(v) print variables and values (`v [bui|glo|con|loc]*`)
(:) evaluate expression - see `v`, (h) print this help

Docs: https://trufflesuite.com/docs/truffle/how-to/debug-test/use-the-truffle-debugger/

debug(ganache)>

Commands:
(enter) last command entered (undefined)
(o) step over, (i) step line / step into, (u) step out, (n) step next
(c) continue until breakpoint, (Y) reset & continue to previous error
(y) (if at end) reset & continue to final error
(;) step instruction (include number to step multiple)
(g) turn on generated sources, (G) turn off generated sources except via `;`
(p) print instruction & state (`p [mem|cal|sto]*`; see docs for more)
(l) print additional source context (`l [+<lines-ahead>] [-<lines-back>]`)
(s) print stacktrace, (e) Print recent events (`e [<number>|all]`)
(q) quit, (r) reset, (t) load new transaction, (T) unload transaction
(b) add breakpoint (`b [[<source-file>:]<line-number>]`; see docs for more)
(B) remove breakpoint (similar to adding, or `B all` to remove all)
(+) add watch expression (`+:<expr>`), (-) remove watch expression (-:<expr>)
(?) list existing watch expressions and breakpoints
(v) print variables and values (`v [bui|glo|con|loc]*`)
(:) evaluate expression - see `v`, (h) print this help

Docs: https://trufflesuite.com/docs/truffle/how-to/debug-test/use-the-truffle-debugger/

debug(ganache)>

Commands:
(enter) last command entered (undefined)
(o) step over, (i) step line / step into, (u) step out, (n) step next
(c) continue until breakpoint, (Y) reset & continue to previous error
(y) (if at end) reset & continue to final error
(;) step instruction (include number to step multiple)
(g) turn on generated sources, (G) turn off generated sources except via `;`
(p) print instruction & state (`p [mem|cal|sto]*`; see docs for more)
(l) print additional source context (`l [+<lines-ahead>] [-<lines-back>]`)
(s) print stacktrace, (e) Print recent events (`e [<number>|all]`)
(q) quit, (r) reset, (t) load new transaction, (T) unload transaction
(b) add breakpoint (`b [[<source-file>:]<line-number>]`; see docs for more)
(B) remove breakpoint (similar to adding, or `B all` to remove all)
(+) add watch expression (`+:<expr>`), (-) remove watch expression (-:<expr>)
(?) list existing watch expressions and breakpoints
(v) print variables and values (`v [bui|glo|con|loc]*`)
(:) evaluate expression - see `v`, (h) print this help

Docs: https://trufflesuite.com/docs/truffle/how-to/debug-test/use-the-truffle-debugger/

debug(ganache)>

Commands:
(enter) last command entered (undefined)
(o) step over, (i) step line / step into, (u) step out, (n) step next
(c) continue until breakpoint, (Y) reset & continue to previous error
(y) (if at end) reset & continue to final error
(;) step instruction (include number to step multiple)
(g) turn on generated sources, (G) turn off generated sources except via `;`
(p) print instruction & state (`p [mem|cal|sto]*`; see docs for more)
(l) print additional source context (`l [+<lines-ahead>] [-<lines-back>]`)
(s) print stacktrace, (e) Print recent events (`e [<number>|all]`)
(q) quit, (r) reset, (t) load new transaction, (T) unload transaction
(b) add breakpoint (`b [[<source-file>:]<line-number>]`; see docs for more)
(B) remove breakpoint (similar to adding, or `B all` to remove all)
(+) add watch expression (`+:<expr>`), (-) remove watch expression (-:<expr>)
(?) list existing watch expressions and breakpoints
(v) print variables and values (`v [bui|glo|con|loc]*`)
(:) evaluate expression - see `v`, (h) print this help

Docs: https://trufflesuite.com/docs/truffle/how-to/debug-test/use-the-truffle-debugger/

debug(ganache)>

Commands:
(enter) last command entered (undefined)
(o) step over, (i) step line / step into, (u) step out, (n) step next
(c) continue until breakpoint, (Y) reset & continue to previous error
(y) (if at end) reset & continue to final error
(;) step instruction (include number to step multiple)
(g) turn on generated sources, (G) turn off generated sources except via `;`
(p) print instruction & state (`p [mem|cal|sto]*`; see docs for more)
(l) print additional source context (`l [+<lines-ahead>] [-<lines-back>]`)
(s) print stacktrace, (e) Print recent events (`e [<number>|all]`)
(q) quit, (r) reset, (t) load new transaction, (T) unload transaction
(b) add breakpoint (`b [[<source-file>:]<line-number>]`; see docs for more)
(B) remove breakpoint (similar to adding, or `B all` to remove all)
(+) add watch expression (`+:<expr>`), (-) remove watch expression (-:<expr>)
(?) list existing watch expressions and breakpoints
(v) print variables and values (`v [bui|glo|con|loc]*`)
(:) evaluate expression - see `v`, (h) print this help

Docs: https://trufflesuite.com/docs/truffle/how-to/debug-test/use-the-truffle-debugger/

debug(ganache)>

Commands:
(enter) last command entered (undefined)
(o) step over, (i) step line / step into, (u) step out, (n) step next
(c) continue until breakpoint, (Y) reset & continue to previous error
(y) (if at end) reset & continue to final error
(;) step instruction (include number to step multiple)
(g) turn on generated sources, (G) turn off generated sources except via `;`
(p) print instruction & state (`p [mem|cal|sto]*`; see docs for more)
(l) print additional source context (`l [+<lines-ahead>] [-<lines-back>]`)
(s) print stacktrace, (e) Print recent events (`e [<number>|all]`)
(q) quit, (r) reset, (t) load new transaction, (T) unload transaction
(b) add breakpoint (`b [[<source-file>:]<line-number>]`; see docs for more)
(B) remove breakpoint (similar to adding, or `B all` to remove all)
(+) add watch expression (`+:<expr>`), (-) remove watch expression (-:<expr>)
(?) list existing watch expressions and breakpoints
(v) print variables and values (`v [bui|glo|con|loc]*`)
(:) evaluate expression - see `v`, (h) print this help

Docs: https://trufflesuite.com/docs/truffle/how-to/debug-test/use-the-truffle-debugger/

debug(ganache)> q

C:\Users\LENOVO\Desktop\uni\SEM 1 2023 2024\CSCI 4312 Blockchain\Group Project\voting-dApp>truffle migrate --reset --debug

Compiling your contracts...
===========================
√ Fetching solc version list from solc-bin. Attempt #1
> Compiling .\contracts\Election.sol
> Artifacts written to C:\Users\LENOVO\Desktop\uni\SEM 1 2023 2024\CSCI 4312 Blockchain\Group Project\voting-dApp\build\contracts
> Compiled successfully using:
   - solc: 0.8.23+commit.f704f362.Emscripten.clang


Starting migrations...
======================
> Network name:    'ganache'
> Network id:      5777
> Block gas limit: 6721975 (0x6691b7)


2_deploy_contracts.js
=====================

   Deploying 'Election'
   --------------------
 *** Deployment Failed ***

"Election" hit an invalid opcode while deploying. Try:
   * Verifying that your constructor params satisfy all assert conditions.
   * Verifying your constructor code doesn't access an array out of bounds.
   * Adding reason strings to your assert statements.


Exiting: Review successful transactions manually by checking the transaction hashes above on Etherscan.


Error:  *** Deployment Failed ***

"Election" hit an invalid opcode while deploying. Try:
   * Verifying that your constructor params satisfy all assert conditions.
   * Verifying your constructor code doesn't access an array out of bounds.
   * Adding reason strings to your assert statements.

    at C:\Users\LENOVO\AppData\Roaming\npm\node_modules\truffle\build\webpack:\packages\deployer\src\deployment.js:330:1Truffle v5.11.5 (core: 5.11.5)
Node v20.8.0

C:\Users\LENOVO\Desktop\uni\SEM 1 2023 2024\CSCI 4312 Blockchain\Group Project\voting-dApp>
C:\Users\LENOVO\Desktop\uni\SEM 1 2023 2024\CSCI 4312 Blockchain\Group Project\voting-dApp>truffle migrate

Compiling your contracts...
===========================
√ Fetching solc version list from solc-bin. Attempt #1
> Compiling .\contracts\Election.sol
> Artifacts written to C:\Users\LENOVO\Desktop\uni\SEM 1 2023 2024\CSCI 4312 Blockchain\Group Project\voting-dApp\build\contracts
> Compiled successfully using:
   - solc: 0.8.23+commit.f704f362.Emscripten.clang


Starting migrations...
======================
> Network name:    'ganache'
> Network id:      5777
> Block gas limit: 6721975 (0x6691b7)


2_deploy_contracts.js
=====================

   Deploying 'Election'
   --------------------
 *** Deployment Failed ***

"Election" hit an invalid opcode while deploying. Try:
   * Verifying that your constructor params satisfy all assert conditions.
   * Verifying your constructor code doesn't access an array out of bounds.
   * Adding reason strings to your assert statements.


Exiting: Review successful transactions manually by checking the transaction hashes above on Etherscan.


Error:  *** Deployment Failed ***

"Election" hit an invalid opcode while deploying. Try:
   * Verifying that your constructor params satisfy all assert conditions.
   * Verifying your constructor code doesn't access an array out of bounds.
   * Adding reason strings to your assert statements.

    at C:\Users\LENOVO\AppData\Roaming\npm\node_modules\truffle\build\webpack:\packages\deployer\src\deployment.js:330:1
Truffle v5.11.5 (core: 5.11.5)
Node v20.8.0

C:\Users\LENOVO\Desktop\uni\SEM 1 2023 2024\CSCI 4312 Blockchain\Group Project\voting-dApp>truffle migrate

Compiling your contracts...
===========================
√ Fetching solc version list from solc-bin. Attempt #1
> Compiling .\contracts\Election.sol
> Artifacts written to C:\Users\LENOVO\Desktop\uni\SEM 1 2023 2024\CSCI 4312 Blockchain\Group Project\voting-dApp\build\contracts
> Compiled successfully using:
   - solc: 0.8.23+commit.f704f362.Emscripten.clang


Starting migrations...
======================
> Network name:    'ganache'
> Network id:      5777
> Block gas limit: 6721975 (0x6691b7)


2_deploy_contracts.js
=====================

   Deploying 'Election'
   --------------------
 *** Deployment Failed ***

"Election" hit an invalid opcode while deploying. Try:
   * Verifying that your constructor params satisfy all assert conditions.
   * Verifying your constructor code doesn't access an array out of bounds.
   * Adding reason strings to your assert statements.


Exiting: Review successful transactions manually by checking the transaction hashes above on Etherscan.


Error:  *** Deployment Failed ***

"Election" hit an invalid opcode while deploying. Try:
   * Verifying that your constructor params satisfy all assert conditions.
   * Verifying your constructor code doesn't access an array out of bounds.
   * Adding reason strings to your assert statements.

    at C:\Users\LENOVO\AppData\Roaming\npm\node_modules\truffle\build\webpack:\packages\deployer\src\deployment.js:330:1
Truffle v5.11.5 (core: 5.11.5)
Node v20.8.0

C:\Users\LENOVO\Desktop\uni\SEM 1 2023 2024\CSCI 4312 Blockchain\Group Project\voting-dApp>solc --version
'solc' is not recognized as an internal or external command,
operable program or batch file.

C:\Users\LENOVO\Desktop\uni\SEM 1 2023 2024\CSCI 4312 Blockchain\Group Project\voting-dApp>truffle migrate

Compiling your contracts...
===========================
> Compiling .\contracts\Election.sol

project:/contracts/Election.sol:2:1: ParserError: Source file requires different compiler version (current compiler is 0.5.16+commit.9c3226ce.Emscripten.clang - note that nightly builds are considered to be strictly less than the released version
pragma solidity ^0.8;
^-------------------^

Error: Truffle is currently using solc 0.5.16, but one or more of your contracts specify "pragma solidity ^0.8".
Please update your truffle config or pragma statement(s).
(See https://trufflesuite.com/docs/truffle/reference/configuration#compiler-configuration for information on
configuring Truffle to use a specific solc compiler version.)

Compilation failed. See above.
Truffle v5.11.5 (core: 5.11.5)
Node v20.8.0

C:\Users\LENOVO\Desktop\uni\SEM 1 2023 2024\CSCI 4312 Blockchain\Group Project\voting-dApp>truffle compile

Compiling your contracts...
===========================
> Compiling .\contracts\Election.sol

project:/contracts/Election.sol:2:1: ParserError: Source file requires different compiler version (current compiler is 0.5.16+commit.9c3226ce.Emscripten.clang - note that nightly builds are considered to be strictly less than the released version
pragma solidity ^0.8;
^-------------------^

Error: Truffle is currently using solc 0.5.16, but one or more of your contracts specify "pragma solidity ^0.8".
Please update your truffle config or pragma statement(s).
(See https://trufflesuite.com/docs/truffle/reference/configuration#compiler-configuration for information on
configuring Truffle to use a specific solc compiler version.)

Compilation failed. See above.
Truffle v5.11.5 (core: 5.11.5)
Node v20.8.0

C:\Users\LENOVO\Desktop\uni\SEM 1 2023 2024\CSCI 4312 Blockchain\Group Project\voting-dApp>truffle compile

Compiling your contracts...
===========================
> Compiling .\contracts\Election.sol
> Compiling .\contracts\Election.sol

project:/contracts/Election.sol:29:5: SyntaxError: No visibility specified. Did you intend to add "public"?
    constructor () {
    ^ (Relevant source part starts here and spans across multiple lines).

Compilation failed. See above.
Truffle v5.11.5 (core: 5.11.5)
Node v20.8.0

C:\Users\LENOVO\Desktop\uni\SEM 1 2023 2024\CSCI 4312 Blockchain\Group Project\voting-dApp>truffle compile

Compiling your contracts...
===========================
> Compiling .\contracts\Election.sol
> Compiling .\contracts\Election.sol
> Artifacts written to C:\Users\LENOVO\Desktop\uni\SEM 1 2023 2024\CSCI 4312 Blockchain\Group Project\voting-dApp\build\contracts
> Compiled successfully using:
   - solc: 0.5.16+commit.9c3226ce.Emscripten.clang

C:\Users\LENOVO\Desktop\uni\SEM 1 2023 2024\CSCI 4312 Blockchain\Group Project\voting-dApp>truffle migrate

Compiling your contracts...
===========================
> Compiling .\contracts\Election.sol
> Artifacts written to C:\Users\LENOVO\Desktop\uni\SEM 1 2023 2024\CSCI 4312 Blockchain\Group Project\voting-dApp\build\contracts
> Compiled successfully using:
   - solc: 0.5.16+commit.9c3226ce.Emscripten.clang


Starting migrations...
======================
> Network name:    'ganache'
> Network id:      5777
> Block gas limit: 6721975 (0x6691b7)


2_deploy_contracts.js
=====================

   Deploying 'Election'
   --------------------
   > transaction hash:    0x634124033db4b7247e9803a2ce3f0f42a458e901a24ad86a75829d6c91f24e2d
   > Blocks: 0            Seconds: 0
   > contract address:    0xFE8a0E654F3b3C2407e1557C9FcFA1E50d797025
   > block number:        1
   > block timestamp:     1704008703
   > account:             0xc283D588AB2a5b1dA0fE3Ae139182CAE0Bf9D43B
   > balance:             99.996875344
   > gas used:            925824 (0xe2080)
   > gas price:           3.375 gwei
   > value sent:          0 ETH
   > total cost:          0.003124656 ETH

   > Saving artifacts
   -------------------------------------
   > Total cost:         0.003124656 ETH

Summary
=======
> Total deployments:   1
> Final cost:          0.003124656 ETH



C:\Users\LENOVO\Desktop\uni\SEM 1 2023 2024\CSCI 4312 Blockchain\Group Project\voting-dApp>git init
Initialized empty Git repository in C:/Users/LENOVO/Desktop/uni/SEM 1 2023 2024/CSCI 4312 Blockchain/Group Project/voting-dApp/.git/

C:\Users\LENOVO\Desktop\uni\SEM 1 2023 2024\CSCI 4312 Blockchain\Group Project\voting-dApp>git add .
warning: in the working copy of 'build/contracts/Election.json', LF will be replaced by CRLF the next time Git touches it
warning: in the working copy of 'contracts/Election.sol', LF will be replaced by CRLF the next time Git touches it
warning: in the working copy of 'truffle-config.js', LF will be replaced by CRLF the next time Git touches it

C:\Users\LENOVO\Desktop\uni\SEM 1 2023 2024\CSCI 4312 Blockchain\Group Project\voting-dApp>doskey /history > history.txt

C:\Users\LENOVO\Desktop\uni\SEM 1 2023 2024\CSCI 4312 Blockchain\Group Project\voting-dApp>

//

Microsoft Windows [Version 10.0.22621.2861]
(c) Microsoft Corporation. All rights reserved.

C:\Users\LENOVO>solc --version
'solc' is not recognized as an internal or external command,
operable program or batch file.

C:\Users\LENOVO>npm install -g solc

changed 9 packages in 4s

1 package is looking for funding
  run `npm fund` for details

C:\Users\LENOVO>
C:\Users\LENOVO>solc --version
'solc' is not recognized as an internal or external command,
operable program or batch file.

C:\Users\LENOVO>npm bin -g
Unknown command: "bin"

To see a list of supported npm commands, run:
  npm help

C:\Users\LENOVO>
C:\Users\LENOVO>npm help
npm <command>

Usage:

npm install        install all the dependencies in your project
npm install <foo>  add the <foo> dependency to your project
npm test           run this project's tests
npm run <foo>      run the script named <foo>
npm <command> -h   quick help on <command>
npm -l             display usage info for all commands
npm help <term>    search for help on <term> (in a browser)
npm help npm       more involved overview (in a browser)

All commands:

    access, adduser, audit, bugs, cache, ci, completion,
    config, dedupe, deprecate, diff, dist-tag, docs, doctor,
    edit, exec, explain, explore, find-dupes, fund, get, help,
    help-search, hook, init, install, install-ci-test,
    install-test, link, ll, login, logout, ls, org, outdated,
    owner, pack, ping, pkg, prefix, profile, prune, publish,
    query, rebuild, repo, restart, root, run-script, search,
    set, shrinkwrap, star, stars, start, stop, team, test,
    token, uninstall, unpublish, unstar, update, version, view,
    whoami

Specify configs in the ini-formatted file:
    C:\Users\LENOVO\AppData\Roaming\SPB_16.6\.npmrc
or on the command line via: npm <command> --key=value

More configuration info: npm help config
Configuration fields: npm help 7 config

npm@10.1.0 C:\Program Files\nodejs\node_modules\npm

C:\Users\LENOVO>truffle version
Truffle v5.11.5 (core: 5.11.5)
Ganache v7.9.1
Solidity v0.5.16 (solc-js)
Node v20.8.0
Web3.js v1.10.0

C:\Users\LENOVO>npm list web3
LENOVO@ C:\Users\LENOVO
`-- web3@4.3.0


C:\Users\LENOVO>
C:\Users\LENOVO>


